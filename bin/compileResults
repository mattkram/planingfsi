#!/usr/bin/python

# Add subfolder for potential code to python path
import os, sys, inspect
from fnmatch import fnmatch

import numpy as np
import krampy as kp
import config
import matplotlib.pyplot as plt

# Construct case directories
baseDir = './'
# Load all case directories that match format
caseDirFormat = r'Fr*'
caseDir = [case for case in os.listdir(baseDir) if fnmatch(case, caseDirFormat)]
caseDir = [case for case in caseDir if not fnmatch(case, '*_*')]

caseDir, Fr = kp.sortDirByNum(caseDir)

itDir = []
for i, case in enumerate(caseDir):
  try:
    itDir.append(kp.sortDirByNum([it for it in os.listdir(case) if fnmatch(it, '[0.validated-9]*')])[0][-1])
  except:
    itDir.append('')

series = []
series.append(['forces_bowSealLower.txt',   'Lift',     'bowSealLift'])
series.append(['forces_sternSealLower.txt', 'Lift',     'sternSealLift'])
series.append(['forces_total.txt',          'FricLift', 'fricLift'])
series.append(['forces_total.txt',          'WaveLift', 'waveLift'])
series.append(['motion_default.txt',      'Lift',     'totalLift'])
series.append(['forces_bowSealLower.txt',   'Drag',     'bowSealDrag'])
series.append(['forces_sternSealLower.txt', 'Drag',     'sternSealDrag'])
series.append(['forces_total.txt',          'FricDrag', 'fricDrag'])
series.append(['forces_total.txt',          'WaveDrag', 'waveDrag'])
series.append(['motion_default.txt',      'Drag',     'totalDrag'])
series.append(['motion_default.txt',      'draft',    'draft'])
series.append(['motion_default.txt',      'trim',     'trim'])
series.append(['forces_bowSealLower.txt',   'Length',   'bowSealLen'])
series.append(['forces_sternSealLower.txt', 'Length',   'sternSealLen'])

# Write Headers
ff = open('simResults.txt', 'w')
ff.write('# Fr')
for s in series:
  ff.write(' {0}'.format(s[2]))
ff.write('\n')

# Write values from each case
for Fri, caseDiri, itDiri in zip(Fr, caseDir, itDir):
  ff.write('{0:0.4f}'.format(Fri))
  for s in series:
    path = os.path.join(baseDir, caseDiri, itDiri, s[0])
    if os.path.exists(path):
      K = kp.Dictionary(path)
      val = K.read_or_default(s[1], np.nan)
    else:
      val = np.nan
    ff.write(' {0:12.6e}'.format(val))
  ff.write('\n')
ff.close()
