#!/usr/bin/python
import os
import sys
from fnmatch import fnmatch

if os.environ.get('DISPLAY') is None:
    import matplotlib as mpl
    mpl.use('Agg')

import numpy as np

from planingfsi import config
import planingfsi.krampy as kp
from planingfsi.potentialplaningcalculation import PotentialPlaningCalculation
from planingfsi.rigidbody import FEStructure
from planingfsi.fsiiterator import Simulation
from planingfsi.fsiinterpolator import Interpolator

# Process system arguments
for arg in sys.argv[1:]:
    if arg == 'post' or arg == '-post':
        print 'Running in post-processing mode'
        config.plotSave        = True
        config.plot            = True
        config.resultsFromFile = True
    if arg == 'plotSave' or arg == '-plotSave':
        config.plotSave = True
        config.plot = True
    if arg == 'new' or arg == '-new':
        kp.rm_rf([d for d in os.listdir(config.caseDir) if fnmatch(d, '[0-9]*')])

# Create objects
fluid = PotentialPlaningCalculation()
solid = FEStructure()
sim   = Simulation(solid, fluid)

# Add all rigid bodies
if os.path.exists(config.bodyDictDir):
    for dictName in [dir for dir in os.listdir(config.bodyDictDir) if not fnmatch(dir, '.*')]:
        solid.addRigidBody(os.path.join(config.bodyDictDir, dictName))
else:
    solid.addRigidBody()

# Add all substructures
for dictName in [dir for dir in os.listdir(config.inputDictDir) if not fnmatch(dir, '.*')]:
    dictPath = os.path.join(config.inputDictDir, dictName)
    K = kp.Dictionary(dictPath)
    ssSolid = solid.addSubstructure(K)

    if K.readOrDefault('hasPlaningSurface', False):
        ssFluid = fluid.addPlaningSurface(K)
        ssInterp = Interpolator(ssSolid, ssFluid, K)
        ssInterp.setSolidPositionFunction(ssSolid.getCoordinates)
        ssInterp.setFluidPressureFunction(ssFluid.getLoadsInRange)

# Add all pressure cushions
if os.path.exists(config.cushionDictDir):
    for dictName in [dir for dir in os.listdir(config.cushionDictDir) if not fnmatch(dir, '.*')]:
        fluid.addPressureCushion(os.path.join(config.cushionDictDir, dictName))

# Run simulation
sim.run()
