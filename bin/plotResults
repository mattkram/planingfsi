#!/usr/bin/python

# Add subfolder for potential code to python path
import os, sys, inspect
from fnmatch import fnmatch

import numpy as np
import krampy as kp
from matplotlib.ticker import MultipleLocator, FixedLocator
from scipy.interpolate import interp1d
import config
import matplotlib.pyplot as plt

# Physical constants
rho = 1000.0
g   = 9.81
kgf2lbf = 2.20462
ft2in = 12
ft2m = 0.3048
lbf2N = g / kgf2lbf
in2m = ft2m / ft2in

# Model parameters
Lc  = 62.64   # in
Bc  = 25.75   # in
W   = 100.0   # lbf
Pc  = 8.0     # psf

# Convert to SI
Lc *= in2m    # m
Bc *= in2m    # m
W  *= lbf2N   # N
W  /= Bc      # N / m
Pc *= lbf2N   # N / ft2
Pc /= ft2m**2 # Pa

expVel, expDrag, expTrim, expDraft = np.loadtxt('results.txt', unpack=True) # ft/s, lbf, deg, in
expVel   *= ft2m            # m / s
expVel   /= np.sqrt(g * Lc) # n.d.
expDrag  *= lbf2N           # N
expDrag  /= Bc              # N / m
expDrag  /= W               # n.d.
expDraft *= in2m            # m

Fr, Lbs, Lss, Lf, Lw, Lt, Dbs, Dss, Df, Dw, Dt, draft, trim, Lwbs, Lwss = np.loadtxt('simResults.txt', unpack=True)

Lbs /= W # n.d.
Lss /= W # n.d.
Lf  /= W # n.d.
Lt  /= W # n.d.
Dbs /= W # n.d.
Dss /= W # n.d.
Dt  /= W # n.d.
Dw  /= W # n.d.
Df  /= W # n.d.

Frc, Dc3d = np.loadtxt('waveDrag.txt', unpack=True) # n.d., n.d. 
Dc3d *= 2 * Pc / (rho * g * Lc) * 1.2 # n.d.

f = interp1d(Frc, Dc3d, bounds_error=False, fill_value=0.0)
Rc3d = f(Fr)

try:
  Frf, Dfsw = np.loadtxt('fricDrag.txt', unpack=True)
  Dfsw *= lbf2N
  Dfsw /= Bc
  Dfsw /= 1.18
  Dfsw /= W
except:
  Frf = Fr
  Dfsw = Frf**2 * g * Lc * 0.0015

f = interp1d(Frf, Dfsw, bounds_error=False, fill_value=0.0)
Rfsw = f(Fr)

def extrapLastPt(y):
  for i, _ in enumerate(y):
    if (np.abs(y[i]) == float('Inf') or np.isnan(y[i]) or y[i] == 0.0) and not i == 0:
      y[i] = y[i-1]
  
  return y

Dt -= Dbs + Dss # Subtract off seal drag

Dbs = Lbs / extrapLastPt(Lbs / Dbs) # Extrapolate bow seal drag
Dss = Lss / extrapLastPt(Lss / Dss) # Extrapolate stern seal drag

Dt += Rfsw + Rc3d # Add sidewall friction and 3d wave drag
#Dbs /= 2
#Dss /= 2
Dt += Dbs + Dss   # Add back extrapolated seal drag

# Create Subplots
plt.figure(figsize=(6,9))

#nSplt = 4
#spltNum = 1
#dragAx  = plt.subplot(nSplt, 1, spltNum)
#spltNum += 1
#liftAx  = plt.subplot(nSplt, 1, 2)
#spltNum += 1
#draftAx = plt.subplot(nSplt, 1, spltNum)
#spltNum += 1
#trimAx  = plt.subplot(nSplt, 1, spltNum)
#spltNum += 1
#lenAx   = plt.subplot(nSplt, 1, spltNum)

dragAx  = plt.axes([0.12, 0.59, 0.85, 0.32])
draftAx = plt.axes([0.12, 0.41, 0.85, 0.13])
trimAx  = plt.axes([0.12, 0.23, 0.85, 0.13])
lenAx   = plt.axes([0.12, 0.05, 0.85, 0.13])

bowSealSty   = 'b--'
sternSealSty = 'r-'
totalSty     = 'k-'
waveSty      = 'g-'
fricSty      = 'm-.'
expSty       = 'ko'

# Plot Drag
legEnt = []
dragAx.plot(Fr, Dt,   totalSty, linewidth=2.0)
legEnt.append('Total')
dragAx.plot(Fr, Dt - Dss - Dbs, 'k:', linewidth=2.0)
legEnt.append('No Seals')
#dragAx.plot(Fr, Dw,   waveSty)

dragAx.plot(Frc, Dc3d, waveSty, linewidth=2.0)
legEnt.append('Wave')

dragAx.plot(Fr, Dss,  sternSealSty, linewidth=2.0)
legEnt.append('Stern Seal')

dragAx.plot(Fr, Dbs,  bowSealSty, linewidth=2.0)
legEnt.append('Bow Seal')

dragAx.plot(Fr, Rfsw, fricSty, linewidth=2.0)
legEnt.append('Sidewall')

dragAx.plot(expVel, expDrag, expSty)
#legEnt.append('Exp. Total')
dragAx.set_ylabel(r'$D/W$')
dragAx.set_ylim(ymin=0.0)

dragAx.legend(legEnt, loc='upper center', bbox_to_anchor=(0.5,1.3), fancybox=True, ncol=3)

# Plot Lift
#liftAx.plot(Fr, Lbs, bowSealSty)
#liftAx.plot(Fr, Lss, sternSealSty)
#liftAx.plot(Fr, Lt, totalSty)
#liftAx.set_ylabel(r'$L/W$')
#liftAx.set_ylim(ymin=0.0)

# Plot Draft
draftAx.plot(Fr, draft, totalSty, linewidth=2.0)
draftAx.plot(expVel, expDraft, expSty)
draftAx.set_ylabel(r'$d\,\mathrm{[m]}$')

# Plot Trim
trimAx.plot(Fr, trim, totalSty, linewidth=2.0)
trimAx.plot(expVel, expTrim, expSty)
trimAx.set_ylabel(r'$\theta\,\mathrm{[deg]}$')

# Plot Wetted Length
lenAx.plot(Fr, Lwbs, bowSealSty, linewidth=2.0)
lenAx.plot(Fr, Lwss, sternSealSty, linewidth=2.0)
lenAx.set_ylabel(r'$L_w\,\mathrm{[m]}$')
lenAx.set_xlabel(r'$Fr$')

# Set all x-axis limits
plotLim = dragAx.get_xlim()
plotLim = [0.2, 1.8]
for ax in plt.gcf().get_axes():
  ax.set_xlim(plotLim)
plt.subplots_adjust(left=0.15)

plt.savefig('results.eps', format='eps')

#ff = open('resultsNew.txt', 'w')
#for Fri, Dti, trimi, drafti in zip(Fr, Dt, trim, draft):
#  ff.write('{0} {1} {2} {3}\n'.format(Fri, Dti, trimi, drafti))
#ff.close()
