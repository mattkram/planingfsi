name: Run Python Tests

on:
  push:
    branches:
    - dev
    - main
  pull_request:

jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        include:
        - python-version: '3.11.0-beta.5'
          os: ubuntu-latest
          experimental: true
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1.1.6
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install library and dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction
    - name: Static type checking
      continue-on-error: true
      run: |
        poetry run mypy .
    - name: Test with pytest
      run: |
        poetry run pytest \
          --junitxml=./test-reports/junit.xml \
          --cov-report xml:./test-reports/coverage.xml \
          --cov planingfsi \
          --slow \
          tests
    - name: Publish code coverage
      run: |
        poetry run codecov -t $CODECOV_TOKEN
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    - name: Build package
      run: poetry build
    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheel-file
        path: |
          build/*.whl

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Poetry
      uses: snok/install-poetry@v1.1.6
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install package dependencies
      run: poetry install --no-dev
    - name: Build package
      run: poetry build
    - name: Publish package
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
        poetry publish
